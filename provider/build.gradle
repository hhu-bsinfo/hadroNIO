plugins {
    id 'java-library'
    id 'maven-publish'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'com.palantir.git-version' version '0.12.2'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group 'de.hhu.bsinfo'
version = getProperty('projectVersion')

compileJava {
    sourceCompatibility = '8'
    targetCompatibility = '8'
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':core')
    implementation project(':jucx-binding')
    implementation 'org.agrona:agrona:1.12.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

def projects = [ ':core', ':jucx-binding', ':provider' ]

javadoc {
    source projects.collect { project(it).sourceSets.main.allJava }
    classpath = files(projects.collect { project(it).sourceSets.main.compileClasspath }) + files(buildDir.toString() + '/gen/buildconfig/classes/main')
}

javadoc.dependsOn('compileBuildConfig')

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from projects.collect { project(it).sourceSets.main.allJava }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    from project(':core').buildDir.toString() + '/classes/java/main'
    from project(':jucx-binding').buildDir.toString() + '/classes/java/main'
}

shadowJar {
    archivesBaseName = 'hadronio'
}

buildConfig {
    def gitVersion = versionDetails()

    appName = project.name
    version = project.version

    clsName = 'BuildConfig'
    packageName = 'de.hhu.bsinfo.hadronio.generated'

    charset = 'UTF-8'

    buildConfigField 'String', 'BUILD_DATE', new Date().format('yyyy-MM-dd HH:mm:ss')
    buildConfigField 'String', 'GIT_COMMIT', gitVersion.gitHash
    buildConfigField 'String', 'GIT_BRANCH', gitVersion.branchName
}

// Workaround for 'Configuration <compile> not found', caused by de.fuerstenau.buildconfig with Gradle 7+
configurations {
    create("compile")
}

apply from: 'publish.gradle'