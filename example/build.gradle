plugins {
    id 'idea'
    id 'java'
    id 'application'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group 'de.hhu.bsinfo'
version = getProperty('projectVersion')

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(Boolean.parseBoolean(System.getProperty('infinileap')) ? 20 : 11))
    }
}

if (Boolean.parseBoolean(System.getProperty('release'))) {
    tasks.distZip.dependsOn(':provider:optimize')
    tasks.distTar.dependsOn(':provider:optimize')
    tasks.installDist.dependsOn(':provider:optimize')
    tasks.startScripts.dependsOn(':provider:optimize')
}

application.setApplicationName("hadronio")
application.getMainClass().set("de.hhu.bsinfo.hadronio.example.Application")

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':provider')

    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    implementation "com.esotericsoftware:kryo:${kryoVersion}"
    implementation "io.netty:netty-transport:${nettyVersion}"
    implementation "io.netty:netty-buffer:${nettyVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "org.apache.tomcat:annotations-api:${tomcatVersion}"
    implementation "site.ycsb:core:${ycsbVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

test {
    useJUnitPlatform()
}

startScripts {
    doLast {
        def line = unixScript.text.lines().find{it.startsWith('CLASSPATH=$APP_HOME')} as CharSequence
        unixScript.text = unixScript.text.replace(line, line + ':$CLASSPATH')

        unixScript.text = unixScript.text.replace("\$APP_HOME/lib/infinileap-binding-${version}.jar:", '')
        unixScript.text = unixScript.text.replace("\$APP_HOME/lib/jucx-binding-${version}.jar:", '')
        unixScript.text = unixScript.text.replace("\$APP_HOME/lib/core-${version}.jar:", '')

        unixScript.text = unixScript.text.replaceFirst('exec ', 'UCX_ERROR_SIGNALS="" UCX_TCP_CM_REUSEADDR=y UCX_MAX_RNDV_RAILS=1 exec ')
    }
}